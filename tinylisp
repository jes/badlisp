#!/usr/bin/perl

# intention is to run the meta-circular evaluator

# only support:
# - car
# - cdr
# - cons
# - quote
# - atom
# - eq
# - lambda
# - cond

# lists are just perl lists, not complicated cons ones
# a list item is a symbol if !ref $item, and an arrayref otherwise

use strict;
use warnings;

my $FALSE = [];
my $TRUE = 't';

my @TOKENS;
my $ENV = {
    car => sub { return shift->[0] },
    cdr => sub { my @f = @{shift()};shift @f;return \@f },
    cons => sub { my ($first, $rest) = @_; return [$first, @$rest]; },
    atom => sub { my ($el) = @_; return (!null($el) && ref $el) ? $FALSE : $TRUE },
    eq => sub { my ($a,$b) = @_; return $TRUE if null($a) && null($b); return ($a eq $b) ? $TRUE : $FALSE; },
};

my $nlamb = 0;

print _print(_eval(_read(), 200)), "\n";

sub _eval {
    my $r = __eval(@_);
    print "<-- " . _print($r) . "\n";
    return $r;
}

sub __eval {
    my ($form, $level) = @_;
    $level //= 0;

    print "[$level] EVAL " . _print($form) . "\n";
    print "[$level] --> ENV = " . dump_env($ENV) . "\n";

    return lookup($form, $ENV) if !ref $form;

    return $form if null($form);
    my $op = _eval($form->[0],$level+1);

    if (ref $op eq 'CODE') {
        return $op->(map { _eval($_) } @{$form}[1..@$form-1]);
    } elsif ($op eq 'quote') {
        return $form->[1];
    } elsif ($op eq 'lambda') {
        print "[$level] LAMBDA $nlamb: ENV = " . dump_env($ENV) . "\n";
        my $n = $nlamb;
        my $r = sub {
            $ENV = {__parent => $ENV};
            $ENV->{$form->[1][$_]} = $_[$_] for 0..@{$form->[1]}-1;
            print "args to lambda $n are:\n   " . join("\n   ", map { _print($_) } @_) . "\n";
            my $r = _eval($form->[2]);
            $ENV = $ENV->{__parent};
            return $r;
        };
        print "[$level] MADE LAMBDA $nlamb\n";
        $nlamb++;
        return $r;
    } elsif ($op eq 'cond') {
        for (my $i = 1; $i < @$form; $i++) {
            print "[$level] COND?\n";
            if (!null(_eval($form->[$i][0], $level+1))) {
                print "[$level] got\n";
                return _eval($form->[$i][1], $level+1);
            }
        }
    }

    return [];
}

sub null {
    my ($form) = @_;
    return ref $form eq 'ARRAY' && @$form == 0;
}

sub lookup {
    my ($name, $env) = @_;
    return $env->{$name} if exists $env->{$name};
    return lookup($name, $env->{__parent}) if exists $env->{__parent};
    return $name; # incorrect, but required for special forms
}

sub cdr {
    my ($form) = @_;
    my @f = @$form;
    shift @f;
    return \@f;
}

sub _read {
    my $str = join('',<>);
    $str =~ s/([()])/ $1 /g;
    @TOKENS = grep { $_ } split /\s+/, $str;
    return read_form();
}

sub read_form {
    if ($TOKENS[0] eq '(') {
        return read_list();
    } else {
        return read_atom();
    }
}

sub read_atom {
    return shift @TOKENS;
}

sub read_list {
    my @list;
    shift @TOKENS; # (
    while ($TOKENS[0] ne ')') {
        push @list, read_form();
    }
    shift @TOKENS; # )
    return \@list;
}

sub _print {
    my ($v) = @_;
    if (ref $v eq 'ARRAY') {
        return '('.join(' ', map { _print($_) } @$v).')';
    } else {
        return $v;
    }
}

sub dump_env {
    my ($env) = @_;
    my $r = '';
    for my $name (keys %$env) {
        next if $name =~ /__parent/;
        $r .= "$name = " . _print($env->{$name}) . "\n";
    }
    $r .= dump_env($env->{__parent}) if exists $env->{__parent};
    return $r;
}
