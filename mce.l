((lambda (assoc evcon pairlis evlis apply eval)
   (eval (quote ((lambda (ff x) (ff x))
                 (quote (lambda (x)
                          (cond ((atom x) x)
                                ((quote t) (ff (car x))))))
                 (quote ((((a) d)) b c))))
         ()))
 (lambda (x y)
          (cond ((eq y ()) ())
                ((eq x (car (car y)))
                       (car (cdr (car y))))
                ((quote t)
                 (assoc x (cdr y)))))
 (lambda (c a)
          (cond ((eval (car (car c)) a)
                 (eval (car (cdr (car c))) a))
                ((quote t) (evcon (cdr c) a))))
 (lambda (x y a)
          (cond ((eq x ()) a)
                ((quote t) (cons (cons (car x) (cons (car y) ()))
                                 (pairlis (cdr x) (cdr y) a)))))
 (lambda (m a)
          (cond ((eq m ()) ())
                ((quote t) (cons (eval (car m) a)
                                 (evlis (cdr m) a)))))
 (lambda (fn x a)
          (cond
            ((atom fn)
             (cond ((eq fn (quote car))  (car  (car x)))
                   ((eq fn (quote cdr))  (cdr  (car x)))
                   ((eq fn (quote atom)) (atom (car x)))
                   ((eq fn (quote cons)) (cons (car x) (car (cdr x))))
                   ((eq fn (quote eq))   (eq   (car x) (car (cdr x))))
                   ((quote t)            (apply (eval fn a) x a))))
            ((eq (car fn) (quote lambda))
             (eval (car (cdr (cdr fn)))
                   (pairlis (car (cdr fn)) x a)))))
 (lambda (e a)
          (cond
            ((atom e) (assoc e a))
            ((atom (car e))
             (cond ((eq (car e) (quote quote)) (car (cdr e)))
                   ((eq (car e) (quote cond)) (evcon (cdr e) a))
                   ((quote t) (apply (car e) (evlis (cdr e) a) a))))
            ((quote t) (apply (car e) (evlis (cdr e) a) a)))))
